# USE
# ===
# This is an example configuration file for the i/o plugin pp_serialdriver.py
# it defines input and output events and maps them to serial inputs and outputs

# the output commands in this example are for NEC PA522UG projector but have not been tested.

# This file in /pipresents/pp_resources/pp_templates may be overwritten by updates and is not used by Pi Presents
# copy the file to the profile in directoy that is to use it. Place it in the directory pp_io_config.

# There is no checking of the content of this file by Pi Presents, try any changes by
#  running from a terminal window so that any exceptions are reported

# DRIVER SECTION
# ==============
# Some fields are required by all drivers:
# title = EXAMPLE I/O PLUGIN   text which is reported on logs and error reports
# enabled = yes   yes/no a driver can be enabled/disabled using this so this file can be left in pp_io_config
# module = pp_serialdriver -  the python module that implements this driver (without .py). More than one I/O config file can use the same driver.

# These fields are for  pp_serialdriver.py:
# a. The identity the serial port name to be used.
# b. the Baud Rate, Stop Bit, Parity and Data Byte size of the port
# c. tick interval, mode, and eol character for input

	
# INPUT AND OUTPUT SECTIONS
# ==============
# Every section has a section name e.g. [MYSECTION1] - it may be any single word provided it is unique
# Every section must have a direction field which is in or out


# INPUT SECTIONS
# ==============
# direction = in
# name = myname - the symbolic name of the event that will be generated if the input is received
# mode = char - char/string. A serial input receives characters. If the mode is char then every character will be treated as an input event. If string, a line terminated by eol will be an input event.
# value = a -  if the input matches this character or string then an event with symbolic name 'name' will be generated 
	
# OUTPUT SECTIONS
# ==============


# THE REAL STUFF
# --------------

[DRIVER]
title = SERIAL PORT
enabled = yes
module= pp_serialdriver


#PORT
#this is the serial port you are going to use
port-name = /dev/ttyUSB0

# baud rate options are 50, 75, 110, 134, 150, 200, 300, 600, 1200, 1800, 2400, 4800, 9600, 19200, 38400, 57600, 115200
baud-rate = 38400

#parity - options are none, odd, even       
parity-bit = none

# stop bits options are 1 or 2	  
stop-bits = 1		  

# byte size options are numeric value 5, 6, 7, or 8
byte-size = 8

# INPUT
tick-interval = 50
# match-mode - char/line whether input matching is one character or a complete line
match-mode = char
# eol character for line input (hex)
eol-char = 0D

# OUT



#INPUT SECTIONS
# if using this for a real projector there should be no inputs as projector will send replies.
[in01]
direction = in
mode = char
# projector on
match = p
name = play-p

[in02]
direction = in
mode = char
# projector off
match = o
name = play-o

[in03]
direction = in
mode = char
# send string
match = s
name = play-s

[in04]
direction = in
mode = char
# send bytes
match = b
name = play-b


#OUTPUT SECTIONS
# OUTPUT WITH PARAMETER VALUES IN CONFIG DATA
# animation command  - 0 projector power on/off
[out01]
direction = out
name = projector
type = power
value = on
message-type = bytes
message = 02 00 00 00 00 02



[out02]
direction = out
name = projector
type = power
value = off
message-type = bytes
message = 02 01 00 00 00 03


[out03]
direction = out
name = projector
type = picture-mute
value = on
message-type = bytes
message = 02 10 00 00 00 12


[out04]
direction = out
name = projector
type = picture-mute
value = off
message-type = bytes
message = 02 11 00 00 00 13


# GENERIC SERIAL SEND, PARAMETER CONTAINED IN ANIMATION COMMAND
# if the VALUE field of the config data then the animations command type and paramter value is sent

# send a string of characters
# animation command  - 0 serial-send string "abc de"
# string must be enclosed in double quotes

[out10]
direction = out
name = serial-send
type = string
value = 


# send some bytes -
# animation command  - 0 serial-send bytes "30 31 32 33 34 35"
# value must be in double quotes with bytes seperated by space
# bytes nust be hex
[out11]
direction = out
name = serial-send
type = bytes
value = 




